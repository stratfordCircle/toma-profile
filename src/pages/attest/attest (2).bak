import { Component } from '@angular/core';
import { clientVars } from "./../../environments/environment";
import { IonicPage, NavController, NavParams } from 'ionic-angular';
import * as firebase from 'firebase';
import 'firebase/firestore';
import { CookieService } from "ngx-cookie-service";
import { DatePipe } from '@angular/common';

/**
 * Generated class for the AttestPage page.
 *
 * See https://ionicframework.com/docs/components/#navigation for more info on
 * Ionic pages and navigation.
 */

@IonicPage()
@Component({
  selector: 'page-attest',
  templateUrl: 'attest.html',
})
export class AttestPage {

  editRecords = []
  conferenceNameForQuery: string
  _COLL = clientVars.cycleCollection1 // MAY REMOVE THIS ALTOGETHER
  private _DB : any

  constructor(public navCtrl: NavController, public datepipe: DatePipe, public navParams: NavParams, private cookieService: CookieService) {

/*     if (this.navParams.get("conferenceNameString")) {
      const conferenceNameForQuery = this.navParams.get("conferenceNameString")
      console.log('conference name from Param:' + conferenceNameForQuery)
    } */
this._DB = firebase.firestore();
  }


  ionViewDidLoad() {
    console.log('ionViewDidLoad AttestPage');

    if (this.navParams.get("conferenceNameString")) {
      this.conferenceNameForQuery = this.navParams.get("conferenceNameString")
      console.log('conference name from Param:' + this.conferenceNameForQuery)
//      this.cookieService.set("conferenceCollectionCookie", e, 0.02083333);
      this.loadConferenceRecords(this.conferenceNameForQuery)      
    }

    /* if (conferenceNameForQuery === "") {
       this.isNoConference = true;
       this.is63rdMidWinter = false;
    }
    if (conferenceNameForQuery === "63rd MidWinter Conference") {
      this.isNoConference = false;
      this.is63rdMidWinter = true;
    }
    this.cookieService.set("conferenceCollectionCookie", e, 0.02083333);
    //this.cycleCollection = e

    this.retrieveCollection(); */

  }


  loadConferenceRecords(conference) {

    console.log('pop default')  
  
    this.getDocuments(conference)
    .then((data) =>
    {
      this.editRecords = data
    })
  
  }
  
    getDocuments(conference) : Promise<any> {
  
      console.log('getDocs')
      console.log('conference: ', conference)
      console.log('this._COLL: ', this._COLL)

      const testUserNum = '9999999998'
  
       return new Promise((resolve, reject) => {
  
        var query = this._DB.collection(this._COLL);
        query = query.where('conference', "==", conference)
        query = query.where("aoa_number", "==", testUserNum)
        query.get().then((querySnapshot) => { // QUERY EXAMPLES citiesRef.where("population", ">", 100000).orderBy("population").limit(2)
  
          let obj: any = []; // STORE RETRIEVED DOCUMENTS
  
          querySnapshot
            .forEach((doc: any) => {
  
              const courseCredit = doc.data().hours1;
              const timestamp2 = doc.data().ce_date;
              const ce_date_from_timestamp2 = timestamp2.toDate();
              const formatted_date_entered = this.datepipe.transform(ce_date_from_timestamp2, 'yyyy-MM-dd'); 
              console.log('message: ' + courseCredit)
              obj.push({
                id: doc.id,
                courseCredit: courseCredit,
                ce_date: formatted_date_entered,
                description: doc.data().description,
                accreditor: doc.data().accreditor
              })
  
            });
  
  
  
          //console.log('end of getdocs5: ' + obj.length + 'returned');
          resolve(obj); // SEND BACK THE ARRAY OF OBJECTS
  
        })
          .catch((error: any) => {
            //console.log('error for insufficient priveledges coming from here');
            reject(error);
          });
  
      });
  
    }

    saveNotice(eVent): void {

      console.log('event:', JSON.stringify(eVent))
  
      //const inputValue2 = (<HTMLInputElement>document.getElementById('blue')).value;
  
      var elements = (<HTMLFormElement>document.getElementById("dynamicConference")).elements;
  
      for (var i = 0, element; element = elements[i++];) {
        console.log('looping elements:', element.id + ' ' + element.type)
          if (element.type === "text" && element.value !== "") {
              console.log("value: " + element.value)
              this.updateDoc('irrelevant', element.id, {hours1: element.value})
          }
      }
  
    }

    updateDoc(collectionObj: string,
      docID: string,
      dataObj: any): Promise<any> {
      return new Promise((resolve, reject) => {
        this._DB
          .collection(this._COLL)
          .doc(docID)
          .update(dataObj)
          .then((obj: any) => {
            resolve(obj);
          })
          .catch((error: any) => {
            reject(error);
          });
      });

    }
 
}
